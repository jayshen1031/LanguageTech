const app = getApp()
const audioMCP = require('../../utils/audioMCP')

const db = wx.cloud.database()

Page({
  data: {
    wordList: [],
    currentIndex: 0,
    currentWord: {},
    showExample: true,
    inWordbook: false,
    showComplete: false,
    showSetup: true, // ÊòæÁ§∫ËÆæÁΩÆÁïåÈù¢
    selectedCount: 10, // ÈªòËÆ§Â≠¶‰π†Êï∞Èáè
    masteredCount: 0,
    fuzzyCount: 0,
    forgotCount: 0,
    learningRecord: {}, // ËÆ∞ÂΩïÊØè‰∏™ÂçïËØçÁöÑÂ≠¶‰π†Áä∂ÊÄÅ
    mcpAvailable: false, // MCPÊúçÂä°ÊòØÂê¶ÂèØÁî®
    isPlaying: false, // ÊòØÂê¶Ê≠£Âú®Êí≠ÊîæÈü≥È¢ë
    learningPlan: null, // Â≠¶‰π†ËÆ°Âàí‰ø°ÊÅØ
    learningStats: null // Â≠¶‰π†ÁªüËÆ°
  },
  
  // È°µÈù¢ÂÆû‰æãÂ±ûÊÄß
  timers: [], // Â≠òÂÇ®ÊâÄÊúâÂÆöÊó∂Âô®
  isPageUnloaded: false, // È°µÈù¢ÊòØÂê¶Â∑≤Âç∏ËΩΩ

  onLoad(options) {
    // Ê£ÄÊü•MCPÊúçÂä°ÔºàÂèØÈÄâÔºâ
    // this.checkMCPService()
    
    // ‰∏¥Êó∂Ë∑≥ËøáMCPÔºåÁõ¥Êé•‰ΩøÁî®‰∫ëÂáΩÊï∞ÊàñËØªÈü≥ÊòæÁ§∫
    this.setData({ mcpAvailable: false })
    console.log('‚ö†Ô∏è Ë∑≥ËøáMCPÊúçÂä°Ôºå‰ΩøÁî®Â§áÁî®ÊñπÊ°à')
    
    // ÂàùÂßãÂåñÈü≥È¢ë‰∏ä‰∏ãÊñá
    this.initAudioContext()
    
    // Ê£ÄÊü•Ëá™Âä®ÂºÄÂßãÂ≠¶‰π†ËÆæÁΩÆ
    const autoStart = wx.getStorageSync('autoStartLearning') || false
    this.setData({
      autoStartLearning: autoStart
    })
    
    // Ê∏ÖÁêÜËøáÊúüÁöÑÈü≥È¢ëÁºìÂ≠ò
    this.cleanExpiredAudioCache()
    
    // Ê£ÄÊü•ÊòØÂê¶Êúâ‰º†ÂÖ•ÁöÑÂ≠¶‰π†Êï∞ÈáèÔºåÂ¶ÇÊûúÊúâÂàôËá™Âä®ÂºÄÂßã
    if (options && options.count) {
      const count = parseInt(options.count)
      if (count > 0) {
        this.setData({ 
          selectedCount: count,
          showSetup: false 
        })
        this.loadTodayWords(count)
        return
      }
    }
    
    // Ê£ÄÊü•ÊòØÂê¶Ë¶ÅËá™Âä®ÂºÄÂßãÔºà‰ΩøÁî®ÈªòËÆ§Êï∞ÈáèÔºâ
    if (autoStart) {
      const defaultCount = wx.getStorageSync('defaultLearningCount') || 10
      this.setData({
        selectedCount: defaultCount,
        showSetup: false
      })
      this.loadTodayWords(defaultCount)
    }
  },

  // ÈÄâÊã©Â≠¶‰π†Êï∞Èáè
  selectWordCount(e) {
    const count = parseInt(e.currentTarget.dataset.count)
    this.setData({
      selectedCount: count,
      showSetup: false
    })
    
    // ‰øùÂ≠òÁî®Êà∑ÈÄâÊã©ÁöÑÊï∞Èáè‰Ωú‰∏∫ÈªòËÆ§ÂÄº
    wx.setStorageSync('defaultLearningCount', count)
    
    // Âä†ËΩΩÊåáÂÆöÊï∞ÈáèÁöÑÂçïËØç
    this.loadTodayWords(count)
  },
  
  // ËÆæÁΩÆËá™Âä®ÂºÄÂßãÂ≠¶‰π†
  toggleAutoStart(e) {
    const autoStart = e.detail.value
    
    // ‰øùÂ≠òÂà∞Êú¨Âú∞Â≠òÂÇ®
    wx.setStorageSync('autoStartLearning', autoStart)
    
    // Êõ¥Êñ∞È°µÈù¢Êï∞ÊçÆ
    this.setData({
      autoStartLearning: autoStart
    })
    
    console.log('Ëá™Âä®ÂºÄÂßãÂ≠¶‰π†ËÆæÁΩÆ:', autoStart)
  },
  
  // ÂàùÂßãÂåñÈü≥È¢ë‰∏ä‰∏ãÊñá
  initAudioContext() {
    // ÂàõÂª∫ÂÖ®Â±ÄÈü≥È¢ë‰∏ä‰∏ãÊñá
    this.innerAudioContext = wx.createInnerAudioContext()
    
    // ËÆæÁΩÆÈü≥È¢ë‰∫ã‰ª∂ÁõëÂê¨Âô®
    this.innerAudioContext.onPlay(() => {
      console.log('‚úÖ Èü≥È¢ëÂºÄÂßãÊí≠Êîæ')
      this.setData({ isPlaying: true })
    })
    
    this.innerAudioContext.onEnded(() => {
      console.log('‚úÖ Èü≥È¢ëÊí≠ÊîæÂÆåÊàê')
      this.setData({ isPlaying: false })
    })
    
    this.innerAudioContext.onError((err) => {
      console.error('‚ùå Èü≥È¢ëÊí≠ÊîæÂ§±Ë¥•:', err)
      this.setData({ isPlaying: false })
    })
    
    this.innerAudioContext.onStop(() => {
      console.log('‚èπÔ∏è Èü≥È¢ëÂÅúÊ≠¢Êí≠Êîæ')
      this.setData({ isPlaying: false })
    })
  },

  // Ê∏ÖÁêÜËøáÊúüÁöÑÈü≥È¢ëÁºìÂ≠ò
  cleanExpiredAudioCache() {
    try {
      const cacheExpireDays = 7
      const expireTime = Date.now() - (cacheExpireDays * 24 * 60 * 60 * 1000)
      
      // Ëé∑ÂèñÊâÄÊúâÁºìÂ≠òÁöÑÈü≥È¢ëÊñá‰ª∂
      const storageInfo = wx.getStorageInfoSync()
      let cleanedCount = 0
      
      storageInfo.keys.forEach(key => {
        if (key.startsWith('audio_file_')) {
          try {
            const fileInfo = wx.getStorageSync(key)
            if (fileInfo && fileInfo.timestamp && fileInfo.timestamp < expireTime) {
              wx.removeStorageSync(key)
              cleanedCount++
            }
          } catch (err) {
            // Ê∏ÖÁêÜÂ§±ÊïàÁöÑÁºìÂ≠òÈîÆ
            wx.removeStorageSync(key)
            cleanedCount++
          }
        }
      })
      
      if (cleanedCount > 0) {
        console.log(`üßπ Ê∏ÖÁêÜ‰∫Ü${cleanedCount}‰∏™ËøáÊúüÈü≥È¢ëÁºìÂ≠ò`)
      }
    } catch (err) {
      console.error('Èü≥È¢ëÁºìÂ≠òÊ∏ÖÁêÜÂ§±Ë¥•:', err)
    }
  },

  // Èü≥È¢ëÈ¢ÑÂä†ËΩΩÔºàÂèØÈÄâÔºâ
  async preloadAudio() {
    try {
      const { wordList } = this.data
      if (wordList.length === 0) return
      
      // È¢ÑÂä†ËΩΩÂâç3‰∏™ÂçïËØçÁöÑÈü≥È¢ë
      const preloadWords = wordList.slice(0, 3)
      
      for (const word of preloadWords) {
        const audioUrl = this.getAudioUrl(word.word)
        if (audioUrl) {
          // ÂàõÂª∫‰∏¥Êó∂Èü≥È¢ëÂØπË±°ÊµãËØïËøûÊé•
          const tempAudio = wx.createInnerAudioContext()
          tempAudio.src = audioUrl
          tempAudio.destroy()
        }
      }
      
      console.log(`üéµ È¢ÑÂä†ËΩΩ‰∫Ü${preloadWords.length}‰∏™ÂçïËØçÁöÑÈü≥È¢ë`)
    } catch (err) {
      console.error('Èü≥È¢ëÈ¢ÑÂä†ËΩΩÂ§±Ë¥•:', err)
    }
  },

  // Êô∫ËÉΩÂ≠¶‰π†ËÆ°ÂàíÂä†ËΩΩ
  async loadTodayWords(count = 10) {
    wx.showLoading({
      title: 'ÁîüÊàêÂ≠¶‰π†ËÆ°Âàí...'
    })
    
    try {
      // ‰ªéÈ°µÈù¢ÂèÇÊï∞Ëé∑ÂèñÂ≠¶‰π†Á±ªÂûãÂíåÈÖçÁΩÆ
      const pages = getCurrentPages()
      const currentPage = pages[pages.length - 1]
      const options = currentPage.options || {}
      
      const learningType = options.type || 'mixed'  // new, review, mixed
      const learningCount = parseInt(options.count) || count
      
      console.log(`üéØ ÁîüÊàê${learningType}Â≠¶‰π†ËÆ°ÂàíÔºåÊï∞ÈáèÔºö${learningCount}`)
      
      // Ë∞ÉÁî®Êô∫ËÉΩÂ≠¶‰π†ËÆ°Âàí‰∫ëÂáΩÊï∞
      const result = await wx.cloud.callFunction({
        name: 'vocabulary-integration',
        data: {
          action: 'get_smart_plan',
          totalCount: learningCount,
          newRatio: 1,
          reviewRatio: 3,
          type: learningType
        }
      })
      
      if (result.result.success && result.result.words && result.result.words.length > 0) {
        const wordList = result.result.words
        const plan = result.result.plan
        const stats = result.result.statistics
        
        console.log(`üìä Â≠¶‰π†ËÆ°Âàí: Êñ∞Â≠¶${plan.newCount}‰∏™, Â§ç‰π†${plan.reviewCount}‰∏™, ÊÄªËÆ°${plan.totalCount}‰∏™`)
        console.log(`üìà ËØçÊ±áÁªüËÆ°: ÊÄªÂ∫ìÂ≠ò${stats.totalAvailable}‰∏™, ÂèØÊñ∞Â≠¶${stats.newWordsAvailable}‰∏™, ÂèØÂ§ç‰π†${stats.reviewWordsAvailable}‰∏™`)
        
        // ÊòæÁ§∫Â≠¶‰π†ËÆ°Âàí‰ø°ÊÅØ
        let planInfo = ''
        if (learningType === 'new') {
          planInfo = `Êñ∞Â≠¶ËÆ°Âàí: ${plan.newCount}‰∏™ËØçÊ±á`
        } else if (learningType === 'review') {
          planInfo = `Â§ç‰π†ËÆ°Âàí: ${plan.reviewCount}‰∏™ËØçÊ±á`
        } else {
          planInfo = `Êô∫ËÉΩËÆ°Âàí: Êñ∞Â≠¶${plan.newCount} + Â§ç‰π†${plan.reviewCount}`
        }
        
        wx.showToast({
          title: planInfo,
          icon: 'success',
          duration: 2000
        })
        
        this.setData({
          wordList,
          currentWord: wordList[0] || {},
          currentIndex: 0,
          learningPlan: plan,
          learningStats: stats
        })

        // Â≠òÂÇ®Âà∞ÂÖ®Â±ÄÊï∞ÊçÆ
        app.globalData.todayWords = wordList
        app.globalData.learningPlan = plan
        
        // È¢ÑÂä†ËΩΩÈü≥È¢ë
        this.preloadAudio()
        
      } else {
        // ËØçÊ±áÂ∫ì‰∏∫Á©∫ÔºåÂºïÂØºÁî®Êà∑ÂéªËß£Êûê
        console.log('‚ùå ËØçÊ±áÂ∫ì‰∏∫Á©∫ÊàñÂ≠¶‰π†ËÆ°ÂàíÁîüÊàêÂ§±Ë¥•')
        wx.hideLoading()
        wx.showModal({
          title: 'ËØçÊ±áÂ∫ì‰∏∫Á©∫',
          content: result.result.error || 'ËøòÊ≤°ÊúâËß£ÊûêËøáÁöÑËØçÊ±áÔºåËØ∑ÂÖàÂéª"Êó•ËØ≠Ëß£Êûê"È°µÈù¢ËæìÂÖ•‰∏Ä‰∫õÊó•ËØ≠ÂÜÖÂÆπËøõË°åËß£Êûê',
          confirmText: 'ÂéªËß£Êûê',
          cancelText: '‰∫ÜËß£',
          success: (res) => {
            if (res.confirm) {
              // Ë∑≥ËΩ¨Âà∞Êó•ËØ≠Ëß£ÊûêÈ°µÈù¢
              wx.navigateTo({
                url: '/packageB/pages/japanese-parser/japanese-parser'
              })
            }
          }
        })
        return
      }
      
    } catch (error) {
      console.error('‚ùå ÁîüÊàêÂ≠¶‰π†ËÆ°ÂàíÂ§±Ë¥•:', error)
      wx.hideLoading()
      wx.showModal({
        title: 'Âä†ËΩΩÂ§±Ë¥•',
        content: 'Â≠¶‰π†ËÆ°ÂàíÁîüÊàêÂ§±Ë¥•ÔºåËØ∑ÈáçËØïÊàñÊ£ÄÊü•ÁΩëÁªúËøûÊé•',
        showCancel: false
      })
    } finally {
      wx.hideLoading()
    }
  },

  // Êí≠ÊîæÈü≥È¢ë
  async playAudio() {
    console.log('üéµ Êí≠ÊîæÈü≥È¢ëË¢´ÁÇπÂáª')
    console.log('ÂΩìÂâçÂçïËØç:', this.data.currentWord)
    
    const { currentWord, isPlaying } = this.data
    
    if (isPlaying) {
      console.log('‚è∏Ô∏è ÂÅúÊ≠¢Êí≠Êîæ')
      this.innerAudioContext.stop()
      return
    }
    
    if (!currentWord || !currentWord.word) {
      console.log('‚ùå Ê≤°ÊúâÂèØÊí≠ÊîæÁöÑÂçïËØç')
      return
    }
    
    // Ê£ÄÊü•Èü≥È¢ëÁºìÂ≠ò
    const cacheKey = `audio_file_${currentWord.word}_ja`
    const cachedFileManager = wx.getStorageSync(cacheKey)
    
    if (cachedFileManager) {
      console.log('‚úÖ ‰ΩøÁî®ÁºìÂ≠òÈü≥È¢ëÊí≠Êîæ')
      this.setData({ isPlaying: true })
      this.innerAudioContext.src = cachedFileManager
      this.innerAudioContext.play()
      return
    }
    
    // Ê≤°ÊúâÁºìÂ≠òÔºå‰ΩøÁî®TTSÂπ∂Â∞ùËØï‰øùÂ≠ò
    const word = encodeURIComponent(currentWord.word)
    const ttsUrl = `https://fanyi.baidu.com/gettts?lan=jp&text=${word}&spd=3&source=web`
    
    console.log('üéµ Êí≠ÊîæTTSÂπ∂Â∞ùËØïÁºìÂ≠ò:', currentWord.word)
    this.setData({ isPlaying: true })
    
    // Êí≠ÊîæÊàêÂäüÊó∂‰øùÂ≠òÂà∞Êú¨Âú∞Êñá‰ª∂Á≥ªÁªü
    this.innerAudioContext.onCanplay(() => {
      console.log('üì± TTSÂáÜÂ§áÂ∞±Áª™Ôºå‰øùÂ≠òÈü≥È¢ëÁºìÂ≠ò')
      wx.setStorageSync(cacheKey, ttsUrl) // ÂÖà‰øùÂ≠òURL‰Ωú‰∏∫ÁºìÂ≠òÊ†áËÆ∞
    })
    
    this.innerAudioContext.onError((err) => {
      console.error('‚ùå TTSÊí≠ÊîæÂ§±Ë¥•:', err)
      this.setData({ isPlaying: false })
      console.log('üîÑ ÈôçÁ∫ßÂà∞‰∫ëÂáΩÊï∞ÊñπÊ°à')
      this.playJapaneseAudio(currentWord)
    })
    
    this.innerAudioContext.src = ttsUrl
    this.innerAudioContext.play()
  },

  // Ëé∑ÂèñÈü≥È¢ëURL
  getAudioUrl(word) {
    if (!word) return null
    const encodedWord = encodeURIComponent(word)
    return `https://fanyi.baidu.com/gettts?lan=jp&text=${encodedWord}&spd=3&source=web`
  },

  // Êí≠ÊîæÊó•ËØ≠Èü≥È¢ëÔºà‰∫ëÂáΩÊï∞ÊñπÊ°àÔºâ
  async playJapaneseAudio(word) {
    try {
      const result = await wx.cloud.callFunction({
        name: 'tts-service',
        data: {
          text: word.word,
          language: 'ja'
        }
      })
      
      if (result.result && result.result.audioUrl) {
        this.innerAudioContext.src = result.result.audioUrl
        this.innerAudioContext.play()
      } else {
        wx.showToast({
          title: 'Èü≥È¢ëÁîüÊàêÂ§±Ë¥•',
          icon: 'none'
        })
      }
    } catch (error) {
      console.error('‰∫ëÂáΩÊï∞Èü≥È¢ëÊí≠ÊîæÂ§±Ë¥•:', error)
      wx.showToast({
        title: 'Èü≥È¢ëÊí≠ÊîæÂ§±Ë¥•',
        icon: 'none'
      })
    }
  },

  // ‰∏ä‰∏Ä‰∏™ÂçïËØç
  prevWord() {
    const { currentIndex, wordList } = this.data
    if (currentIndex > 0) {
      const newIndex = currentIndex - 1
      this.setData({
        currentIndex: newIndex,
        currentWord: wordList[newIndex],
        isPlaying: false
      })
      this.innerAudioContext.stop()
    }
  },

  // ‰∏ã‰∏Ä‰∏™ÂçïËØç
  nextWord() {
    const { currentIndex, wordList } = this.data
    if (currentIndex < wordList.length - 1) {
      const newIndex = currentIndex + 1
      this.setData({
        currentIndex: newIndex,
        currentWord: wordList[newIndex],
        isPlaying: false
      })
      this.innerAudioContext.stop()
    }
  },

  // ÂàáÊç¢‰æãÂè•ÊòæÁ§∫
  toggleExample() {
    this.setData({
      showExample: !this.data.showExample
    })
  },

  // Ê∑ªÂä†Âà∞ÁîüËØçÊú¨
  addToWordbook() {
    const { currentWord } = this.data
    if (!currentWord || !currentWord.word) {
      return
    }

    // ËøôÈáåÂèØ‰ª•Ë∞ÉÁî®‰∫ëÂáΩÊï∞ÊàñÁõ¥Êé•Êìç‰ΩúÊï∞ÊçÆÂ∫ì
    wx.showToast({
      title: 'Â∑≤Ê∑ªÂä†Âà∞ÁîüËØçÊú¨',
      icon: 'success'
    })
    
    this.setData({
      inWordbook: true
    })
  },

  // Ê†áËÆ∞ÊéåÊè°Áä∂ÊÄÅ
  markStatus(e) {
    const status = e.currentTarget.dataset.status
    const { currentWord, currentIndex, learningRecord } = this.data
    
    // ËÆ∞ÂΩïÂ≠¶‰π†Áä∂ÊÄÅ
    learningRecord[currentWord.id] = status
    this.setData({ learningRecord })
    
    // Êõ¥Êñ∞ÁªüËÆ°
    this.updateLearningStats(status)
    
    // Ëá™Âä®ÂàáÊç¢Âà∞‰∏ã‰∏Ä‰∏™ÂçïËØç
    if (currentIndex < this.data.wordList.length - 1) {
      setTimeout(() => {
        this.nextWord()
      }, 500)
    } else {
      // ÂÆåÊàêÊâÄÊúâÂçïËØçÂ≠¶‰π†
      this.showLearningComplete()
    }
  },

  // Êõ¥Êñ∞Â≠¶‰π†ÁªüËÆ°
  updateLearningStats(status) {
    const { masteredCount, fuzzyCount, forgotCount } = this.data
    
    switch (status) {
      case 'mastered':
        this.setData({ masteredCount: masteredCount + 1 })
        break
      case 'fuzzy':
        this.setData({ fuzzyCount: fuzzyCount + 1 })
        break
      case 'forgot':
        this.setData({ forgotCount: forgotCount + 1 })
        break
    }
  },

  // ÊòæÁ§∫Â≠¶‰π†ÂÆåÊàê
  showLearningComplete() {
    this.setData({
      showComplete: true
    })
  },

  // Â≠¶‰π†Êõ¥Â§ö
  learnMore() {
    const { selectedCount } = this.data
    this.setData({
      showComplete: false,
      masteredCount: 0,
      fuzzyCount: 0,
      forgotCount: 0,
      learningRecord: {}
    })
    this.loadTodayWords(selectedCount)
  },

  // ÁªìÊùüÂ≠¶‰π†
  goBack() {
    wx.switchTab({
      url: '/pages/index/index'
    })
  },

  // Ë∑≥ËΩ¨Âà∞Êó•ËØ≠Ëß£ÊûêÈ°µÈù¢
  goToParser() {
    wx.navigateTo({
      url: '/packageB/pages/japanese-parser/japanese-parser'
    })
  },

  onUnload() {
    this.isPageUnloaded = true
    
    // Ê∏ÖÁêÜÂÆöÊó∂Âô®
    this.timers.forEach(timer => {
      clearTimeout(timer)
    })
    this.timers = []
    
    // ÈîÄÊØÅÈü≥È¢ë‰∏ä‰∏ãÊñá
    if (this.innerAudioContext) {
      this.innerAudioContext.destroy()
    }
  },

  // ÂàÜ‰∫´
  onShareAppMessage() {
    return {
      title: 'ËØ≠‰º¥Âêõ - Êô∫ËÉΩÊó•ËØ≠Â≠¶‰π†',
      path: '/pages/learn/learn'
    }
  }
})